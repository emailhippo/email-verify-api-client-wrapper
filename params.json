{"name":"Email-verify-api-client-wrapper","tagline":"Email Address Validation API Software for .NET","body":"[logo]: https://s3.amazonaws.com/emailhippo/bizbranding/co.logos/eh-horiz-695x161.png \"Email Hippo\"\r\n[Email Hippo]: https://www.emailhippo.com\r\n[SLAB]: https://msdn.microsoft.com/en-us/library/dn440729(v=pandp.60).aspx\r\n[Docs]: http://api-docs.emailhippo.com\r\n\r\n![alt text][logo]\r\n\r\n# Email Verification API Client\r\n\r\n## About\r\nThis is a .NET package built for easy integration with [Email Hippo] RESTful API services. For\r\nfurther information on the RESTful server side implementation, please see the [Docs].\r\n\r\n## How to get the package\r\nFrom [Nuget](http://nuget.org).\r\n```\r\ninstall-package EmailHippo.EmailVerify.Api.Client\r\n```\r\n\r\n## Who is the package for?\r\n * __.NET__ developers and system integrators needing a fast start to using [Email Hippo] technology.\r\n\r\n## What this package can do\r\nIf you're working in the .NET environment, this package can save you __hours of work__ writing your own JSON parsers, message pumping logic, threading and logging code.\r\n\r\n## Prerequisites\r\n * __Visual Studio__ 2012 or later\r\n * __.NET 4.5__ or later\r\n * __API license key__ from [Email Hippo]\r\n\r\n## Features\r\n * Built for __high performance__ throughput\r\n * __Sync__ and __async__ methods\r\n * __Parallel__ batch processing available\r\n * __Progress reporting__ built in\r\n * __Extensive Logging__ built in using async [SLAB]\r\n  \r\n## How to use the package\r\nPlease note that full code for all of the snippets below are available in the \"EmailHippo.EmailVerify.Api.Client.Tests\" \r\nproject which can be found in the GitHub repository for this project.\r\n\r\n### Step 1 - create and configure\r\nThe main client object is created using a static factory as follows:\r\n\r\n__Example 1__ - creating the client\r\n```c#\r\n/*Visit https://www.emailhippo.com to get a license key*/\r\nconst string LicenseKey = \"{YourLicenseKey}\"; \r\nvar myClient = ApiClientFactoryV2.Create(LicenseKey);\r\n```\r\n\r\n### Step 2 - use\r\nOnce you have a reference to the client object, go ahead and use it.\r\n\r\n__Example 2__ - checking one or more email address synchronously\r\n```c#\r\nvar responses = myClient.Process(new VerificationRequest{Emails = new List<string>{\"me@here.com\"});\r\n\r\n/*Process responses*/\r\n/*..responses*/\r\n```\r\n\r\n__Example 3__ - checking more than one email address asynchronously\r\n```c#\r\nvar responses = myClient.ProcessAsync(new VerificationRequest{Emails = new List<string>{\"me@here.com\"}, CancellationToken.None).Result;\r\n\r\n/*Process responses*/\r\n/*..responses*/\r\n```\r\n\r\n__Example 4__ - progress reporting\r\nProgress can be captured using the built in event delegate \"ProgressChanged\" as follows\r\n```c#\r\nmyClient.ProgressChanged += (o, args) => Console.WriteLine(JsonConvert.SerializeObject(args));\r\n```\r\n\r\n__Example 5__ - logging\r\nHigh performance, Azure compatible exception and application logging is provided using [SLAB].\r\n\r\nEnable logging using standard [SLAB] listeners.\r\n```c#\r\nvar ObservableEventListener listener1;\r\nvar ObservableEventListener listener2;\r\n\r\nlistener1 = new ObservableEventListener();\r\nlistener1.EnableEvents(ExceptionLoggingEventSource.Log, EventLevel.Error);\r\n\r\nlistener1.LogToConsole();\r\n\r\nlistener2 = new ObservableEventListener();\r\nlistener2.EnableEvents(ActivityLoggingEventSource.Log, EventLevel.Error, Keywords.All);\r\n\r\nlistener2.LogToConsole();\r\n```\r\n\r\nFor full details of logging options see the \"EmailHippo.EmailVerify.Api.Client.Diagnostics\" namespace in the source code.\r\n","google":"UA-65302523-1","note":"Don't delete this file! It's used internally to help with page regeneration."}